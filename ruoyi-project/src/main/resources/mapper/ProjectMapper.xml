<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.project.mapper.ProjectMapper">

    <resultMap type="Project" id="ProjectResult">
        <result property="projectId" column="project_id"/>
        <result property="deptId" column="dept_id"/>
        <result property="projectName" column="project_name"/>
        <result property="principalId" column="principal_id"/>
        <result property="expensesTotal" column="expenses_total"/>
        <result property="expensesLeft" column="expenses_left"/>
        <result property="status" column="status"/>
        <result property="note" column="note"/>
        <association property="dept" column="dept_id" javaType="ProjectDept" resultMap="deptResult"/>
        <association property="principal" column="user_id" javaType="ProjectPrincipal" resultMap="principalNameResult"/>
        <association property="flow" column="project_id" javaType="ProjectFlow" resultMap="ProjectFlowResult"/>
    </resultMap>


    <resultMap id="DeptName" type="ProjectDeptUser">
        <result property="userId" column="user_id"/>
        <result property="userName" column="nick_name"/>
    </resultMap>

    <resultMap type="ProjectFlow" id="ProjectFlowResult">
        <result property="id" column="id"/>
        <result property="projectId" column="project_id"/>
        <result property="deployId" column="deploy_id"/>
        <result property="procDefId" column="proc_def_id"/>
    </resultMap>

    <resultMap id="deptResult" type="ProjectDept">
        <id property="deptId" column="dept_id"/>
        <result property="deptName" column="dept_name"/>
    </resultMap>


    <resultMap id="principalNameResult" type="ProjectPrincipal">
        <id property="principalId" column="user_id"/>
        <result property="principalName" column="nick_name"/>
    </resultMap>

    <resultMap type="String" id="ProcessResult">
        <result property="projectName" column="project_name"/>
    </resultMap>

    <sql id="selectProjectVo">
        select project_id, dept_id, project_name, principal_id, expenses_total, expenses_left, status, note
        from project
    </sql>

    <select id="selectUserName" parameterType="long" resultMap="DeptName">
        select u.user_id,u.nick_name from sys_user u
        left join sys_dept d on u.dept_id = d.dept_id
        <where>
            (u.dept_id = #{deptId} OR u.dept_id IN ( SELECT t.dept_id FROM sys_dept t WHERE find_in_set(#{deptId},
            ancestors) ))
        </where>
    </select>

    <select id="selectProjectList" parameterType="Project" resultMap="ProjectResult">
        select p.project_id, p.dept_id, p.project_name, p.principal_id, p.expenses_total, p.expenses_left, p.status,
        d.dept_name, u.nick_name,f.proc_def_id,f.deploy_id from project p
        left join sys_dept d on p.dept_id = d.dept_id
        left join sys_user u on p.principal_id = u.user_id
        left join project_flow f on p.project_id = f.project_id
        <where>
            <if test="deptId != null ">and dept_id = #{deptId}</if>
            <if test="projectId != null">and p.project_id = #{projectId}</if>
            <if test="projectName != null  and projectName != ''">and project_name like concat('%', #{projectName},
                '%')
            </if>
            <if test="principalId != null  and principalId != ''">and principal_id = #{principalId}</if>
            <if test="expensesTotal != null ">and expenses_total = #{expensesTotal}</if>
            <if test="expensesLeft != null ">and expenses_left = #{expensesLeft}</if>
        </where>
    </select>

    <select id="selectProjectById" parameterType="Long" resultMap="ProjectResult">
        <include refid="selectProjectVo"/>
        where project_id = #{projectId}
    </select>

    <select id="selectProjectListByPrincipal" parameterType="Long" resultMap="ProjectResult">
        <include refid="selectProjectVo"/>
        where principal_id = #{userId}
    </select>

    <insert id="insertProject" parameterType="Project">
        insert into project
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="projectId != null">project_id,</if>
            <if test="deptId != null">dept_id,</if>
            <if test="projectName != null">project_name,</if>
            <if test="principalId != null">principal_id,</if>
            <if test="expensesTotal != null">expenses_total,</if>
            <if test="expensesLeft != null">expenses_left,</if>
            <if test="status !=null">status,</if>
            <if test="note !=null">note,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="projectId != null">#{projectId},</if>
            <if test="deptId != null">#{deptId},</if>
            <if test="projectName != null">#{projectName},</if>
            <if test="principalId != null">#{principalId},</if>
            <if test="expensesTotal != null">#{expensesTotal},</if>
            <if test="expensesLeft != null">#{expensesLeft},</if>
            <if test="status !=null">#{status},</if>
            <if test="note !=null">#{note},</if>
        </trim>
    </insert>

    <update id="updateProject" parameterType="Project">
        update project
        <trim prefix="SET" suffixOverrides=",">
            <if test="deptId != null">dept_id = #{deptId},</if>
            <if test="projectName != null">project_name = #{projectName},</if>
            <if test="principalId != null">principal_id = #{principalId},</if>
            <if test="expensesTotal != null">expenses_total = #{expensesTotal},</if>
            <if test="expensesLeft != null">expenses_left = #{expensesLeft},</if>
            <if test="status !=null">status = #{status},</if>
            <if test="note !=null">note = #{note},</if>
        </trim>
        where project_id = #{projectId}
    </update>

    <delete id="deleteProjectById" parameterType="Long">
        delete
        from project
        where project_id = #{projectId}
    </delete>

    <delete id="deleteProjectByIds" parameterType="String">
        delete from project where project_id in
        <foreach item="projectId" collection="array" open="(" separator="," close=")">
            #{projectId}
        </foreach>
    </delete>

    <select id="selectRemiList" resultMap="ProjectResult">
        select p.project_id, p.dept_id, p.project_name, p.principal_id, p.status, d.dept_name, u.nick_name from project
        p
        left join sys_dept d on p.dept_id = d.dept_id
        left join sys_user u on p.principal_id = u.user_id
        <where>p.status = '0'</where>
    </select>

    <select id="selectRemiQueryList" parameterType="Project" resultMap="ProjectResult">
        select p.project_id, p.dept_id, p.project_name, p.principal_id, p.status, d.dept_name, u.nick_name from project
        p
        left join sys_dept d on p.dept_id = d.dept_id
        left join sys_user u on p.principal_id = u.user_id
        <where>p.status = '0'
            <if test="projectId !=null">
                AND project_id = #{projectId}
            </if>
            <if test="projectName != null">
                ANd project_name like concat('%', #{projectName}, '%')
            </if>
        </where>
    </select>

    <select id="selectProjectByProcInsId" resultMap="ProjectResult" parameterType="string">
        select p.project_id, p.dept_id, d.dept_name,p.project_name
        from project_history h
        left join project p on p.project_id = h.project_id
        left join sys_dept d on p.dept_id = d.dept_id
        <where>
            h.his_task_id = #{procInsId}
        </where>
    </select>
</mapper>